#include "color.h"

Color::Color() { rgb[0] = rgb[1] = rgb[2] = 0; }

Color::Color(unsigned char r, unsigned char g, unsigned char b) {
    rgb[0] = r;
    rgb[1] = g;
    rgb[2] = b;
}

Color::Color(Fopt fopt) {
    rgb[0] = (fopt>>16)&0xff;
    rgb[1] = (fopt>>8)&0xff;
    rgb[2] = fopt&0xff;
}

bool Color::diff(Color other, int compression) const {
    int sumdiff = 0;
    for(int i = 0; i < 3; i++) {
        sumdiff += abs(rgb[i]-other.rgb[i]);
    }
    return sumdiff > compression;
}

QString Color::formatted(int compression) const {
    static unsigned char colorvalues[][3] = {
        {0x00,0xFF,0xFF}, {0xF0,0xFF,0xFF}, {0xF5,0xF5,0xDC},
        {0xFF,0xE4,0xC4}, {0x00,0x00,0xFF}, {0xA5,0x2A,0x2A},
        {0xFF,0x7F,0x50}, {0x00,0xFF,0xFF}, {0xFF,0xD7,0x00},
        {0x80,0x80,0x80}, {0x00,0x80,0x00}, {0x4B,0x00,0x82},
        {0xFF,0xFF,0xF0}, {0xF0,0xE6,0x8C}, {0xFA,0xF0,0xE6},
        {0x80,0x00,0x00}, {0x00,0x00,0x80}, {0x80,0x80,0x00},
        {0xFF,0xA5,0x00}, {0xDA,0x70,0xD6}, {0xCD,0x85,0x3F},
        {0xFF,0xC0,0xCB}, {0xDD,0xA0,0xDD}, {0x80,0x00,0x80},
        {0xFF,0x00,0x00}, {0xFA,0x80,0x72}, {0xA0,0x52,0x2D},
        {0xC0,0xC0,0xC0}, {0xFF,0xFA,0xFA}, {0xD2,0xB4,0x8C},
        {0x00,0x80,0x80}, {0xFF,0x63,0x47}, {0xEE,0x82,0xEE},
        {0xF5,0xDE,0xB3}, {0xFF,0xFF,0xFF}, {0xFF,0xFF,0x00}
    };
    static QString colornames[] = {
        "Aqua", "Azure", "Beige", "Bisque", "Blue", "Brown",
        "Coral", "Cyan", "Gold", "Gray", "Green", "Indigo",
        "Ivory", "Khaki", "Linen", "Maroon", "Navy", "Olive",
        "Orange", "Orchid", "Peru", "Pink", "Plum", "Purple",
        "Red", "Salmon", "Sienna", "Silver", "Snow", "Tan",
        "Teal", "Tomato", "Violet", "Wheat", "White", "Yellow"
    };
    QString start = "[COLOR=";
    for(size_t i = 0; i < sizeof colorvalues/sizeof *colorvalues; ++i) {
        if(!diff(Color(colorvalues[i][0], colorvalues[i][1], colorvalues[i][2]), compression)) {
            return start + colornames[i] + "]";
        }
    }
    return start + "#" + tohex((rgb[0]<<16)+(rgb[1]<<8)+rgb[2], 6) + "]";
}

Fopt Color::toFopt() const {
    return static_cast<Fopt>((rgb[0]<<16)+(rgb[1]<<8)+rgb[2]);
}
